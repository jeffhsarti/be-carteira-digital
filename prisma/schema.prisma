// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  wallets   Wallet[]
}

model Wallet {
  id                   String        @id @default(uuid())
  clientId             String
  balance              Decimal       @default(0.00)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  client               Client        @relation(fields: [clientId], references: [id])
  transactionsSent     Transaction[] @relation("Sender")
  transactionsReceived Transaction[] @relation("Receiver")
}

model Transaction {
  id         String            @id @default(uuid())
  senderId   String?
  receiverId String?
  amount     Decimal
  type       TransactionType
  status     TransactionStatus @default(PENDING)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  sender     Wallet?           @relation("Sender", fields: [senderId], references: [id])
  receiver   Wallet?           @relation("Receiver", fields: [receiverId], references: [id])
  reversal   Reversal?
}

enum TransactionType {
  DEPOSIT
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Reversal {
  id            String      @id @default(uuid())
  transactionId String      @unique
  reason        String
  createdAt     DateTime    @default(now())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}
